 def mfa = input(
    message: "Enter MFA Token",
    parameters: [[$class: 'StringParameterDefinition', name: 'mfa', trim: true]]
  )


pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID=""
        AWS_DEFAULT_REGION="us-east-1"
        IMAGE_REPO_NAME="demo-amazon-inspector"
        IMAGE_TAG="latest"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
        // Define Vulnerability Thresholds
        HIGH_LIMIT = 1
        CRITICAL_LIMIT = 1
        MEDIUM_LIMIT = 2
        LOW_LIMIT = 3
    }
    stages {
        stage('Git Checkout') {
          steps {
            checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/SunilPandey01/FirstGitHubDemo.git']])
          }
        }
        stage('Docker Build') {
          steps {
            script {
              dockerImage = docker.build "${IMAGE_REPO_NAME}:${IMAGE_TAG}"
            }
          }
        }
#        stage('Amazon Inspector SBOM Generator') {
#          steps {
#            script {
#              sh '/opt/inspector-sbomgen-1.1.1/linux/amd64/inspector-sbomgen container --image "${IMAGE_REPO_NAME}:${IMAGE_TAG}" -o sbom_path.json'
#            }
#        }
#        }
        stage('Inspector SBOM') {
          steps {
            script {
               def SBOMGEN_VERSION='1.1.0'
                        def SBOMGEN_DOWNLOAD_URL="https://amazon-inspector-sbomgen.s3.amazonaws.com/${SBOMGEN_VERSION}/linux/arm64/inspector-sbomgen.zip"
 
                        sh "wget ${SBOMGEN_DOWNLOAD_URL}"
                        sh "unzip -d inspector-sbomgen inspector-sbomgen.zip"
                        sh """
                                    cd inspector-sbomgen/inspector-sbomgen-${SBOMGEN_VERSION}/linux/arm64
                                    ls -l
                                    chmod +x inspector-sbomgen                                    
                                    ./inspector-sbomgen --version
                                """
            }

          }
        }
        stage('Amazon Inspector API Scan') {
          steps {
            script {
              sh "aws sts assume-role --role-arn arn:aws:iam::638193415387:role/equitable-annuity-sandbox-poweru --serial-number arn:aws:iam::618277986274:mfa/sunil.pandey2 --query Credentials --token-code ${mfa} --role-session-name jenkins-user"
              sh '''aws inspector-scan scan-sbom --sbom file://sbom_path.json --endpoint https://inspector-scan.us-east-1.amazonaws.com --region us-east-1 --output-format INSPECTOR --output json --profile equitable-annuity-sandbox-poweru | jq -s '.' > scan.json'''
              //sh '''python3 vulnerability_thresholds.py -H ${HIGH_LIMIT} -c ${CRITICAL_LIMIT} -m ${MEDIUM_LIMIT} -l ${LOW_LIMIT} scan.json'''
         }
        }
        } 
    }
    post {
        always {
          script {
            sh "pwd"
          }
            archiveArtifacts artifacts: '*.json'
        }
    }
}
